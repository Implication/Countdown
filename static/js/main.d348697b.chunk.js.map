{"version":3,"sources":["components/Timer.js","components/Pause.js","App.js","index.js"],"names":["Timer","min","sec","class","Pause","value","toggle","onClick","App","useState","setMin","seconds","setSeconds","isPaused","setPaused","isHalf","setHalf","speed","setSpeed","displayMessage","setDisplayMessage","interval","buttonState","setButtonState","Speed","useEffect","minutes","document","querySelector","parseInt","setInterval","disabled","classList","remove","clearInterval","add","console","log","type","placeholder","id","onChange","e","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"6OAYeA,EAVD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IACpB,OACE,6BACE,0BAAMC,MAAM,SACTF,EADH,IACSC,EAAM,GAAN,WAAeA,GAAQA,KCIvBE,EARD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACtB,OACE,4BAAQH,MAAM,0BAA0BI,QAASD,GAC9CD,ICwIQG,MAtHf,WAAe,MAEOC,mBAAS,GAFhB,mBAERR,EAFQ,KAEHS,EAFG,OAGeD,mBAAS,GAHxB,mBAGRE,EAHQ,KAGCC,EAHD,OAIeH,oBAAS,GAJxB,mBAIRI,EAJQ,KAIEC,EAJF,OAKWL,oBAAS,GALpB,mBAKRM,EALQ,KAKAC,EALA,OAMWP,mBAAS,KANpB,mBAMRQ,EANQ,KAMDC,EANC,OAO6BT,mBAAS,IAPtC,mBAORU,EAPQ,KAOQC,EAPR,KAQTC,EAAW,KARF,EAUuBZ,mBAAS,SAVhC,mBAURa,EAVQ,KAUKC,EAVL,KA2Eb,SAASC,EAAMnB,GACba,EAASb,GAaX,OA5EAoB,qBAAU,WACR,IAAIC,EAAUC,SAASC,cAAc,gBA4CrC,OA3CAF,EAAUG,SAASH,EAAQrB,OACjBqB,EAGLb,IACHQ,EAAWS,aAAY,WAGrB,GAFAH,SAASC,cAAc,gBAAgBG,UAAW,EAElC,IAAZpB,EAAe,CACjB,GAAY,IAARV,EAOF,OANAmB,GAAkB,SAACD,GAAD,MAAoB,eACtCL,GAAU,GACVa,SAASC,cAAc,gBAAgBG,UAAW,EAClDJ,SAASC,cAAc,UAAUI,UAAUC,OAAO,SAClDN,SAASC,cAAc,mBAAmBK,OAAO,YACjDC,cAAcb,GAGdX,GAAO,SAACT,GAAD,OAASA,EAAM,KACtBW,EAAW,SAGbA,GAAW,SAACD,GAAD,OAAaA,EAAU,KAGhCe,EAAU,GAAKzB,GAAmB,IAAZU,GAAiBe,EAAU,IAAM,IACzDV,GAAQ,GACRI,EAAkB,6BAEhBM,EAAU,GAAKzB,GAAOU,GAAW,IAAMe,EAAU,IAAM,IACzDV,GAAQ,GACRI,EAAkB,6BAER,IAARnB,GAAaU,GAAW,KAC1BgB,SAASC,cAAc,mBAAmBI,UAAUG,IAAI,OACxDC,QAAQC,IAAI,SAGF,IAARpC,GAAaU,GAAW,IAC1BgB,SAASC,cAAc,UAAUI,UAAUG,IAAI,WAEhDlB,IAEE,WACLiB,cAAcb,MAGf,CAACR,EAAUZ,EAAKU,EAASU,EAAUF,EAAgBJ,IA4BpD,yBAAKZ,MAAM,aACT,yBAAKA,MAAM,OACT,6CACA,2BACEmC,KAAK,SACLC,YAAY,QACZC,GAAG,cACHC,SA3BR,SAAoBC,GAClBhC,EAAOmB,SAASa,EAAEC,OAAOtC,WA2BrB,4BAAQF,MAAM,gBAAgBI,QAjCpC,SAAoBmC,GAClB5B,GAAU,KAgCN,UAIDC,EAAS,uBAAGZ,MAAM,kBAAkBgB,GAAsB,6BAC3D,kBAAC,EAAD,CAAOlB,IAAKA,EAAKC,IAAKS,IACtB,kBAAC,EAAD,CAAON,MAAOiB,EAAahB,OAzB/B,WACEQ,GAAWD,GAITU,EAHGV,EAGY,OAFA,YAuBf,4BAAQV,MAAM,gBAAgBI,QAAS,kBAAMiB,EAAM,OAAnD,MAGA,4BAAQrB,MAAM,gBAAgBI,QAAS,kBAAMiB,EAAM,OAAnD,QAGA,4BAAQrB,MAAM,gBAAgBI,QAAS,kBAAMiB,EAAM,OAAnD,Q,WChINoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,W","file":"static/js/main.d348697b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Timer = ({ min, sec }) => {\r\n  return (\r\n    <div>\r\n      <span class=\"timer\">\r\n        {min}:{sec < 10 ? `0${sec}` : sec}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\n\r\nconst Pause = ({ value, toggle }) => {\r\n  return (\r\n    <button class=\"btn btn-speed btn-pause\" onClick={toggle}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Pause;\r\n","import React, { useState, useEffect } from \"react\";\nimport Timer from \"./components/Timer\";\nimport Pause from \"./components/Pause\";\n\n/*\nNotes to whoever is reviewing my code:\nThe  Time's Up box that is supposed to be rendered when the timer is at 0 for some reason is not working for my application, not sure why,\nBut the attempted code written for it can be found in line 33, essentially within my close out condition\n\nThe Minute feature does have a minor bug to it, as the input is of a type display, if a user backspaces out from the text, it will show NaN unde the text,\nFurthermore, To make this a productuion ready applicaiton, I disabled the input bar when a user presses start, to prevent them from tampering with the timer,\nas this was causing a bug where the number could increase while it was moving,All code for this, can be found in the useEffect hook.\n\nI used Play/Pause text, instead of the icon display, \nAll Styling for this project can be found in the index.css folder, no library stylings were used.\n\nFor the blink I used a css method instead of going with javascript, this can be found under the class blink\n\nTheir is a bug with the pause button wtih the method that I used in order to activate the timer, if the pause button is pressed before from my side it caused some errors.\nI used conditional rendering in order to display the text that will change color, and is supposed to change messages for the top.\n\n**/\n\nfunction App() {\n  //Declarative variables\n  let [min, setMin] = useState(0);\n  let [seconds, setSeconds] = useState(0);\n  let [isPaused, setPaused] = useState(true);\n  let [isHalf, setHalf] = useState(false);\n  let [speed, setSpeed] = useState(1000);\n  let [displayMessage, setDisplayMessage] = useState(\"\");\n  let interval = null;\n  let halfway = null;\n  let [buttonState, setButtonState] = useState(\"Pause\");\n\n  //Use Effect/Persistent variables\n  useEffect(() => {\n    let minutes = document.querySelector(\"#minuteInput\");\n    minutes = parseInt(minutes.value);\n    halfway = minutes;\n\n    //Essentially this will activate the timer, when the start button is pressed by a toggler through using react useState Hooks\n    if (!isPaused) {\n      interval = setInterval(() => {\n        document.querySelector(\"#minuteInput\").disabled = true;\n        //Interval that starts when start button is checked\n        if (seconds === 0) {\n          if (min === 0) {\n            setDisplayMessage((displayMessage) => \"Time's up\");\n            setPaused(true);\n            document.querySelector(\"#minuteInput\").disabled = false;\n            document.querySelector(\".timer\").classList.remove(\"blink\");\n            document.querySelector(\".displayMessage\").remove(\"red\");\n            clearInterval(interval);\n            return;\n          } else {\n            setMin((min) => min - 1);\n            setSeconds(59);\n          }\n        } else {\n          setSeconds((seconds) => seconds - 1);\n        }\n        //Halfway Check in interval\n        if (minutes / 2 >= min && seconds === 0 && minutes % 2 === 0) {\n          setHalf(true);\n          setDisplayMessage(\"More than halfway there!\");\n        }\n        if (minutes / 2 >= min && seconds <= 30 && minutes % 2 !== 0) {\n          setHalf(true);\n          setDisplayMessage(\"More than halfway there!\");\n        }\n        if (min === 0 && seconds <= 20) {\n          document.querySelector(\".displayMessage\").classList.add(\"red\");\n          console.log(\"????\");\n        }\n        //Blinker when seconds reach 10 seconds\n        if (min === 0 && seconds <= 10) {\n          document.querySelector(\".timer\").classList.add(\"blink\");\n        }\n      }, speed);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n    console.log(\"Check\");\n  }, [isPaused, min, seconds, interval, displayMessage, isHalf]);\n\n  //Function Purpose, essentially an event listener that toggles the pause boolean to false\n  function startTimer(e) {\n    setPaused(false);\n  }\n\n  //Event listener that grabs the variable in out input text box\n  function getMinutes(e) {\n    setMin(parseInt(e.target.value));\n  }\n\n  //This function allows us to change the speed of how fast the intervals change.\n  function Speed(value) {\n    setSpeed(value);\n  }\n\n  function toggle() {\n    setPaused(!isPaused);\n    if (!isPaused) {\n      setButtonState(\"Pause\");\n    } else {\n      setButtonState(\"Play\");\n    }\n  }\n\n  //UI Display\n  return (\n    <div class=\"container\">\n      <div class=\"top\">\n        <label>Countdown:</label>\n        <input\n          type=\"number\"\n          placeholder=\"(min)\"\n          id=\"minuteInput\"\n          onChange={getMinutes}></input>\n        <button class=\"btn btn-start\" onClick={startTimer}>\n          Start\n        </button>\n      </div>\n      {isHalf ? <p class=\"displayMessage\">{displayMessage}</p> : <br />}\n      <Timer min={min} sec={seconds} />\n      <Pause value={buttonState} toggle={toggle} />\n      <button class=\"btn btn-speed\" onClick={() => Speed(1000)}>\n        1x\n      </button>\n      <button class=\"btn btn-speed\" onClick={() => Speed(666)}>\n        1.5x\n      </button>\n      <button class=\"btn btn-speed\" onClick={() => Speed(333)}>\n        2x\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./reset.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}